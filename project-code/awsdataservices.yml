---
  swagger: "2.0"
  info: 
    version: "1.0.0"
    title: "Interacting with AWS Data Services"
    description: "An API that shows how to interact with various AWS data services using the Python SDK for AWS called boto"
    contact: 
      name: "Scott Steinbruegge"
  host: "localhost:8080"
  basePath: "/cloudmesh/aws-data-services"
  schemes: 
    - "http"
  consumes: 
    - "application/json"
  produces: 
    - "application/json"
  paths: 
    /csv-to-s3: 
      put: 
        description: "Copies the Medicare data set used in CSV format for this project directly from web to an S3 bucket."
        operationId: "copyCSVtoS3"
        responses: 
          200:
            description: "Successfully copied Medicare CSV file from web to S3 bucket named hid-sp18-521."
          400:
            $ref: '#/responses/400Error'
    /json-to-s3: 
      put: 
        description: "Copies the Medicare data set used in JSON format for this project directly from web to an S3 bucket."
        operationId: "copyJSONtoS3"
        responses: 
          200:
            description: "Successfully copied Medicare JSON file from web to S3 bucket named hid-sp18-521."
          400:
            $ref: '#/responses/400Error'
    /s3-files: 
      get: 
        description: "Returns the list of all files stored in the S3 bucket hid-sp18-521."
        operationId: "getS3FileNames"
        responses: 
          200:
            description: "List of all files stored in the S3 bucket hid-sp18-521."
            schema: 
              type: "array"
              items:
                $ref: "#/definitions/S3FileNames"
          400:
            $ref: '#/responses/400Error'
    /data-pipeline-s3-to-rds: 
      put: 
        description: "Starts the AWS Data Pipeline job to import the raw Medicare data file from S3 into a mySQL database running on Amazon RDS."
        operationId: "insertPatientSurveyData-s3toRDS"
        responses: 
          200:
            description: "Successfully started Data Pipeline job ID df-09855991V8LTRRRNJOQW."
          400:
            $ref: '#/responses/400Error'
    /data-pipeline-s3-to-rds-status: 
      get: 
        description: "Returns the list of all files stored in the S3 bucket hid-sp18-521."
        operationId: "getStatusInsertPatientSurveyData-s3toRDS"
        responses: 
          200:
            description: "Returns the runtime status of the  WS Data Pipeline job to import the raw Medicare data file from S3 into a mySQL database running on Amazon RDS."
            schema: 
              type: "array"
              items:
                $ref: "#/definitions/DataPipelineStatus"
          400:
            $ref: '#/responses/400Error'
    /rds-mysql-query/{starRating}: 
      get: 
        description: "Runs a select query on the PatientSurveyData data stored in a mySQL RDS instance that we imported into from the Data Pipeline job."
        operationId: "getPatientSurveyData-RDS"
        parameters: 
          - name: "starRating"
            in: "path"
            description: "Star rating for the patient survey data we'd like to see"
            required: true
            type: "string" 
        responses: 
          200:
            description: "Returns the runtime status of the  WS Data Pipeline job to import the raw Medicare data file from S3 into a mySQL database running on Amazon RDS."
            schema: 
              type: "array"
              items:
                $ref: "#/definitions/PatientSurveyData"
          400:
            $ref: '#/responses/400Error'
    /dynamo-db-delete-table: 
      delete: 
        description: "Deletes the table PatientSurveyData from DynamoDB."
        operationId: "deleteDynamoDBTable"
        responses: 
          204:
            description: "DyanmoDB table PatientSurveyData deleted successfully."
          400:
            $ref: '#/responses/400Error'
    /dynamo-db-create-table: 
      put: 
        description: "Creates the table PatientSurveyData from DynamoDB."
        operationId: "createDynamoDBTable"
        responses: 
          200:
            description: "DynamoDB table PatientSurveyData created successfully."
          400:
            $ref: '#/responses/400Error'
    /dynamo-db-insert-json: 
      put: 
        description: "Loads the table PatientSurveyData from a JSON file stored in S3."
        operationId: "loadDynamoDBTable"
        responses: 
          200:
            description: "DynamoDB table PatientSurveyData loaded successfully from S3 JSON file."
          400:
            $ref: '#/responses/400Error'
    /dynamo-query-table: 
      get: 
        description: "Runs a scan on the PatientSurveyData data stored in DynamoDB to return all results for hospitals located in the state of MO."
        operationId: "getPatientSurveyData-DynamoDB"
        responses: 
          200:
            description: "Scan results on the PatientSurveyData data stored in DynamoDB to return all results for hospitals located in the state of MO."
            schema: 
              type: "array"
              items:
                $ref: "#/definitions/PatientSurveyData"
          400:
            $ref: '#/responses/400Error'
    /redshift-insert-csv-from-s3: 
      put: 
        description: "Loads the table PatientSurveyData from a CSV file stored in S3 into a Redshift table."
        operationId: "loadRedshiftTable"
        responses: 
          200:
            description: "Redshift table PatientSurveyData loaded successfully from S3 CSV file."
          400:
            $ref: '#/responses/400Error'
    /redshift-delete-table: 
      delete: 
        description: "Deletes all data from the table PatientSurveyData on Redshift."
        operationId: "deleteRedshiftTable"
        responses: 
          204:
            description: "Redshift table PatientSurveyData deleted successfully."
          400:
            $ref: '#/responses/400Error'
    /redshift-query-table: 
      get: 
        description: "Runs a query on the PatientSurveyData data stored in Redshift to return the average star rating for hospitals in each state."
        operationId: "getPatientSurveyData-Redshift"
        responses: 
          200:
            description: "Query executed on the PatientSurveyData data stored in Redshift to return the average star rating for hospitals in each state."
            schema: 
              type: "array"
              items:
                $ref: "#/definitions/AvgStarRatingPerState"
          400:
            $ref: '#/responses/400Error'
    /athena-delete-table: 
      delete: 
        description: "Deletes the table PatientSurveyData on Athena."
        operationId: "deleteAthenaTable"
        responses: 
          204:
            description: "Athena table PatientSurveyData deleted successfully."
          400:
            $ref: '#/responses/400Error'
    /athena-create-table: 
      put: 
        description: "Creates the table PatientSurveyData on Athena."
        operationId: "createAthenaTable"
        responses: 
          200:
            description: "Athena table PatientSurveyData created successfully."
          400:
            $ref: '#/responses/400Error'
    /athena-query-table: 
      put: 
        description: "Queries the table PatientSurveyData on Athena and places the query output in CSV file on S3."
        operationId: "getPatientSurveyData-Athena"
        responses: 
          200:
            description: "Athena table PatientSurveyData queried successfully. Results output to CSV in S3."
          400:
            $ref: '#/responses/400Error'

  definitions: 
    S3FileNames: 
      type: "object"
      properties: 
        filename: 
          type: "string"
    DataPipelineStatus:
      type: "object"
      properties:
        run_status:
          type: "string"
    AvgStarRatingPerState:
      type: "object"
      properties:
        state:
          type: "string"
        avg_star_rating:
          type: "string"
    PatientSurveyData:
      type: "object"
      properties:
        computed_region_csmy_5jwy:
          type: "string"
        computed_region_f3tr_pr43:
                type: "string"
        computed_region_nwen_78xc:
                type: "string"
        address:
                type: "string"
        city:
                type: "string"
        county_name:
                type: "string"
        hcahps_answer_description:
                type: "string"
        hcahps_answer_percent:
                type: "string"
        hcahps_answer_percent_footnote:
                type: "string"
        hcahps_linear_mean_value:
                type: "string"
        hcahps_measure_id:
                type: "string"
        hcahps_question:
                type: "string"
        hospital_name:
                type: "string"
        location:
                type: "string"
        location_address:
                type: "string"
        location_city:
                type: "string"
        location_state:
                type: "string"
        location_zip:
                type: "string"
        measure_end_date:
                type: "string"
        measure_start_date:
                type: "string"
        number_of_completed_surveys:
                type: "string"
        number_of_completed_surveys_footnote:
                type: "string"
        patient_survey_star_rating:
                type: "string"
        patient_survey_star_rating_footnote:  
                type: "string"
        phone_number:
                type: "string"
        phone_number_type:
                type: "string"
        provider_id:
                type: "string"
        state:
                type: "string"
        survey_response_rate_percent:
                type: "string"
        survey_response_rate_percent_footnote:
                type: "string"
        zip_code:
                type: "string"

  responses:
    400Error:
      description: Invalid request
      schema:
        type: object 
        properties:
          message:
            type: string
      
          
        
          
