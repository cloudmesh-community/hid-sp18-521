# coding: utf-8

"""
    Provider Data System

    An API that interacts with a SQL database backend of medical provider data system.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Provider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'npi': 'int',
        'provider_type': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'ssn': 'int'
    }

    attribute_map = {
        'npi': 'npi',
        'provider_type': 'provider_type',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'ssn': 'ssn'
    }

    def __init__(self, npi=None, provider_type=None, first_name=None, last_name=None, ssn=None):  # noqa: E501
        """Provider - a model defined in Swagger"""  # noqa: E501

        self._npi = None
        self._provider_type = None
        self._first_name = None
        self._last_name = None
        self._ssn = None
        self.discriminator = None

        self.npi = npi
        if provider_type is not None:
            self.provider_type = provider_type
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if ssn is not None:
            self.ssn = ssn

    @property
    def npi(self):
        """Gets the npi of this Provider.  # noqa: E501


        :return: The npi of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._npi

    @npi.setter
    def npi(self, npi):
        """Sets the npi of this Provider.


        :param npi: The npi of this Provider.  # noqa: E501
        :type: int
        """
        if npi is None:
            raise ValueError("Invalid value for `npi`, must not be `None`")  # noqa: E501

        self._npi = npi

    @property
    def provider_type(self):
        """Gets the provider_type of this Provider.  # noqa: E501


        :return: The provider_type of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Provider.


        :param provider_type: The provider_type of this Provider.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def first_name(self):
        """Gets the first_name of this Provider.  # noqa: E501


        :return: The first_name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Provider.


        :param first_name: The first_name of this Provider.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Provider.  # noqa: E501


        :return: The last_name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Provider.


        :param last_name: The last_name of this Provider.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def ssn(self):
        """Gets the ssn of this Provider.  # noqa: E501


        :return: The ssn of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this Provider.


        :param ssn: The ssn of this Provider.  # noqa: E501
        :type: int
        """

        self._ssn = ssn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Provider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
