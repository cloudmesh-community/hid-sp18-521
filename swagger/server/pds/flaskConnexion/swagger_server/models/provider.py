# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Provider(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, npi=None, provider_type=None, first_name=None, last_name=None, ssn=None):  # noqa: E501
        """Provider - a model defined in Swagger

        :param npi: The npi of this Provider.  # noqa: E501
        :type npi: int
        :param provider_type: The provider_type of this Provider.  # noqa: E501
        :type provider_type: str
        :param first_name: The first_name of this Provider.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Provider.  # noqa: E501
        :type last_name: str
        :param ssn: The ssn of this Provider.  # noqa: E501
        :type ssn: int
        """
        self.swagger_types = {
            'npi': int,
            'provider_type': str,
            'first_name': str,
            'last_name': str,
            'ssn': int
        }

        self.attribute_map = {
            'npi': 'npi',
            'provider_type': 'provider_type',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'ssn': 'ssn'
        }

        self._npi = npi
        self._provider_type = provider_type
        self._first_name = first_name
        self._last_name = last_name
        self._ssn = ssn

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Provider of this Provider.  # noqa: E501
        :rtype: Provider
        """
        return util.deserialize_model(dikt, cls)

    @property
    def npi(self):
        """Gets the npi of this Provider.


        :return: The npi of this Provider.
        :rtype: int
        """
        return self._npi

    @npi.setter
    def npi(self, npi):
        """Sets the npi of this Provider.


        :param npi: The npi of this Provider.
        :type npi: int
        """
        if npi is None:
            raise ValueError("Invalid value for `npi`, must not be `None`")  # noqa: E501

        self._npi = npi

    @property
    def provider_type(self):
        """Gets the provider_type of this Provider.


        :return: The provider_type of this Provider.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Provider.


        :param provider_type: The provider_type of this Provider.
        :type provider_type: str
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")  # noqa: E501

        self._provider_type = provider_type

    @property
    def first_name(self):
        """Gets the first_name of this Provider.


        :return: The first_name of this Provider.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Provider.


        :param first_name: The first_name of this Provider.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Provider.


        :return: The last_name of this Provider.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Provider.


        :param last_name: The last_name of this Provider.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def ssn(self):
        """Gets the ssn of this Provider.


        :return: The ssn of this Provider.
        :rtype: int
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this Provider.


        :param ssn: The ssn of this Provider.
        :type ssn: int
        """
        if ssn is None:
            raise ValueError("Invalid value for `ssn`, must not be `None`")  # noqa: E501

        self._ssn = ssn
